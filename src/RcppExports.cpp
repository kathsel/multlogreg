// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// dmvlogis
double dmvlogis(const arma::vec& x, const arma::vec& mean, const arma::mat& R, double df, bool logd);
RcppExport SEXP _multlogreg_dmvlogis(SEXP xSEXP, SEXP meanSEXP, SEXP RSEXP, SEXP dfSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< double >::type df(dfSEXP);
    Rcpp::traits::input_parameter< bool >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvlogis(x, mean, R, df, logd));
    return rcpp_result_gen;
END_RCPP
}
// dmvnrm
double dmvnrm(const arma::vec& x, const arma::vec& mean, const arma::mat& sigma, bool logd);
RcppExport SEXP _multlogreg_dmvnrm(SEXP xSEXP, SEXP meanSEXP, SEXP sigmaSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnrm(x, mean, sigma, logd));
    return rcpp_result_gen;
END_RCPP
}
// dmvt
double dmvt(const arma::vec& x, const arma::vec& mean, const arma::mat& sigma, double df, bool logd);
RcppExport SEXP _multlogreg_dmvt(SEXP xSEXP, SEXP meanSEXP, SEXP sigmaSEXP, SEXP dfSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type df(dfSEXP);
    Rcpp::traits::input_parameter< bool >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvt(x, mean, sigma, df, logd));
    return rcpp_result_gen;
END_RCPP
}
// cmvlr
List cmvlr(const arma::cube& x, const arma::mat& y, int iter, const arma::vec& beta0, const arma::vec& r0, const arma::vec& phi0, const arma::vec& mubeta, const arma::mat& sigbeta, const arma::mat& omega, int burn_in, int thinning, int burn_in_truncated);
RcppExport SEXP _multlogreg_cmvlr(SEXP xSEXP, SEXP ySEXP, SEXP iterSEXP, SEXP beta0SEXP, SEXP r0SEXP, SEXP phi0SEXP, SEXP mubetaSEXP, SEXP sigbetaSEXP, SEXP omegaSEXP, SEXP burn_inSEXP, SEXP thinningSEXP, SEXP burn_in_truncatedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type r0(r0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi0(phi0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mubeta(mubetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigbeta(sigbetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< int >::type burn_in(burn_inSEXP);
    Rcpp::traits::input_parameter< int >::type thinning(thinningSEXP);
    Rcpp::traits::input_parameter< int >::type burn_in_truncated(burn_in_truncatedSEXP);
    rcpp_result_gen = Rcpp::wrap(cmvlr(x, y, iter, beta0, r0, phi0, mubeta, sigbeta, omega, burn_in, thinning, burn_in_truncated));
    return rcpp_result_gen;
END_RCPP
}
// rtmvn_accrej
arma::mat rtmvn_accrej(int n, const arma::vec& mean, const arma::mat& sigma, const arma::mat& D, const arma::vec& lower, const arma::vec& upper, int nproposals, bool verbose);
RcppExport SEXP _multlogreg_rtmvn_accrej(SEXP nSEXP, SEXP meanSEXP, SEXP sigmaSEXP, SEXP DSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP nproposalsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< int >::type nproposals(nproposalsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rtmvn_accrej(n, mean, sigma, D, lower, upper, nproposals, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rtmvn_gibbs
arma::mat rtmvn_gibbs(int n, const arma::vec& mean, const arma::mat& sigma, const arma::mat& D, const arma::vec& lower, const arma::vec& upper, const arma::vec& init, int burn_in, int thinning);
RcppExport SEXP _multlogreg_rtmvn_gibbs(SEXP nSEXP, SEXP meanSEXP, SEXP sigmaSEXP, SEXP DSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP initSEXP, SEXP burn_inSEXP, SEXP thinningSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type init(initSEXP);
    Rcpp::traits::input_parameter< int >::type burn_in(burn_inSEXP);
    Rcpp::traits::input_parameter< int >::type thinning(thinningSEXP);
    rcpp_result_gen = Rcpp::wrap(rtmvn_gibbs(n, mean, sigma, D, lower, upper, init, burn_in, thinning));
    return rcpp_result_gen;
END_RCPP
}
// rtuvn
arma::vec rtuvn(int n, double mean, double sd, double lower, double upper);
RcppExport SEXP _multlogreg_rtuvn(SEXP nSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(rtuvn(n, mean, sd, lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// rtuvn_single
double rtuvn_single(double mean, double sd, double lower, double upper);
RcppExport SEXP _multlogreg_rtuvn_single(SEXP meanSEXP, SEXP sdSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(rtuvn_single(mean, sd, lower, upper));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_multlogreg_dmvlogis", (DL_FUNC) &_multlogreg_dmvlogis, 5},
    {"_multlogreg_dmvnrm", (DL_FUNC) &_multlogreg_dmvnrm, 4},
    {"_multlogreg_dmvt", (DL_FUNC) &_multlogreg_dmvt, 5},
    {"_multlogreg_cmvlr", (DL_FUNC) &_multlogreg_cmvlr, 12},
    {"_multlogreg_rtmvn_accrej", (DL_FUNC) &_multlogreg_rtmvn_accrej, 8},
    {"_multlogreg_rtmvn_gibbs", (DL_FUNC) &_multlogreg_rtmvn_gibbs, 9},
    {"_multlogreg_rtuvn", (DL_FUNC) &_multlogreg_rtuvn, 5},
    {"_multlogreg_rtuvn_single", (DL_FUNC) &_multlogreg_rtuvn_single, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_multlogreg(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
